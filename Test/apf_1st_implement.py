import numpy as np
import matplotlib.pyplot as plt
from scipy.ndimage import gaussian_filter1d

# def attractive_potential(q, goal, k_att):
#     return 0.5 * k_att * np.linalg.norm(q - goal) ** 2

# def repulsive_potential(q, obstacles, k_rep, d0):
#     U_rep = 0
#     for obs in obstacles:
#         d = np.linalg.norm(q - obs)
#         if d <= d0:
#             U_rep += 0.5 * k_rep * (1/d - 1/d0) ** 2
#     return U_rep




# def total_potential(q, goal, obstacles, k_att, k_rep, d0):
#     return attractive_potential(q, goal, k_att) + repulsive_potential(q, obstacles, k_rep, d0)


# def gradient(q, goal, obstacles, k_att, k_rep, d0, epsilon=1e-3):
#     grad = np.zeros_like(q)
#     for i in range(len(q)):
#         q_step = q.copy()
#         q_step[i] += epsilon  # Small step in dimension i
#         grad[i] = (total_potential(q_step, goal, obstacles, k_att, k_rep, d0) - total_potential(q, goal, obstacles, k_att, k_rep, d0)) / epsilon
    
#     grad = -grad  # Move in the negative gradient direction
    
#     # Limit step size to 1
#     if np.linalg.norm(grad) > (1/15):
#         grad = grad / np.linalg.norm(grad)
    
#     return grad
import random

# def gradient(q, goal, obstacles, k_att, k_rep, d0, epsilon=1e-3):
#     grad = np.zeros_like(q)
#     for i in range(len(q)):
#         q_step = q.copy()
#         q_step[i] += epsilon  # Small step in dimension i
#         grad[i] = (total_potential(q_step, goal, obstacles, k_att, k_rep, d0) - total_potential(q, goal, obstacles, k_att, k_rep, d0)) / epsilon
    
#     grad = -grad  # Move in the negative gradient direction

#     # If stuck in a local minimum, apply a small random perturbation
#     # if np.linalg.norm(grad) < 1e-3:  
#     #     grad += np.array([random.uniform(-0.5, 0.5), random.uniform(-0.5, 0.5)])

    

#     # Limit step size
#     if np.linalg.norm(grad) > (1/15):
#         grad = grad / np.linalg.norm(grad)

#     return grad

# def apf_path_planning(start, goal, obstacles, k_att=0.0001, k_rep=100000.0, d0=50.0, step_size=15, max_iters=5000):
#     path = [start]
#     q = np.array(start, dtype=np.float64)
#     goal = np.array(goal, dtype=np.float64)
#     obstacles = np.array(obstacles, dtype=np.float64)
    
#     potential_values = []
    
#     for _ in range(max_iters):
#         grad = gradient(q, goal, obstacles, k_att, k_rep, d0)
#         q += step_size * grad  # Move based on gradient
#         path.append(q.copy())
#         potential_values.append(total_potential(q, goal, obstacles, k_att, k_rep, d0))
        
#         if np.linalg.norm(q - goal) < 0.1:  # Goal reached threshold
#             break
    
#     path = np.array(path)
#     path[:, 0] = gaussian_filter1d(path[:, 0], sigma=2)
#     path[:, 1] = gaussian_filter1d(path[:, 1], sigma=2)
    
#     return path, potential_values

import numpy as np
import matplotlib.pyplot as plt
from scipy.ndimage import gaussian_filter1d

def attractive_potential(q, goal, k_att):
    return 0.5 * k_att * np.linalg.norm(q - goal) ** 2

def repulsive_potential(q, obstacles, k_rep, d0):
    U_rep = 0
    rep_grad = np.zeros_like(q)  

    for obs in obstacles:
        d = np.linalg.norm(q - obs)
        if d <= d0:
            U_rep += 0.5 * k_rep * (1/d - 1/d0) ** 2

            # Compute repulsive gradient (force)
            grad_rep = k_rep * (1/d - 1/d0) * (1/d**2) * (q - obs) / d  

            # Add a small tangential force (perpendicular to gradient)
            tangent = np.array([-grad_rep[1], grad_rep[0]])  
            rep_grad += grad_rep + 5 * tangent  

    return U_rep, rep_grad

def total_potential(q, goal, obstacles, k_att, k_rep, d0):
    U_att = attractive_potential(q, goal, k_att)
    U_rep, _ = repulsive_potential(q, obstacles, k_rep, d0)  # Ignore gradient
    return U_att + U_rep

def gradient(q, goal, obstacles, k_att, k_rep, d0, epsilon=1e-3):
    grad = np.zeros_like(q)

    # Compute attractive gradient
    for i in range(len(q)):
        q_step = q.copy()
        q_step[i] += epsilon  # Small step in dimension i
        grad[i] = (total_potential(q_step, goal, obstacles, k_att, k_rep, d0) - total_potential(q, goal, obstacles, k_att, k_rep, d0)) / epsilon
    
    grad = -grad  # Move in the negative gradient direction

    # Compute repulsive gradient
    _, rep_grad = repulsive_potential(q, obstacles, k_rep, d0)

    # Combine attractive and repulsive gradients
    grad += rep_grad  
    # If stuck in a local minimum, apply a small random perturbation
    # if np.linalg.norm(grad) < 1e-3:  
    #     grad += np.array([random.uniform(-0.5, 0.5), random.uniform(-0.5, 0.5)])
    # Limit step size
    if np.linalg.norm(grad) > (1/15):
        grad = grad / np.linalg.norm(grad)

    return grad

def apf_path_planning(start, goal, obstacles, k_att=0.0001, k_rep=100000.0, d0=50.0, step_size=15, max_iters=5000):
    path = [start]
    q = np.array(start, dtype=np.float64)
    goal = np.array(goal, dtype=np.float64)
    obstacles = np.array(obstacles, dtype=np.float64)
    
    potential_values = []
    
    for _ in range(max_iters):
        grad = gradient(q, goal, obstacles, k_att, k_rep, d0)
        q += step_size * grad  # Move based on gradient
        path.append(q.copy())
        potential_values.append(total_potential(q, goal, obstacles, k_att, k_rep, d0))
        
        if np.linalg.norm(q - goal) < 0.1:  # Goal reached threshold
            break
    
    path = np.array(path)
    path[:, 0] = gaussian_filter1d(path[:, 0], sigma=2)
    path[:, 1] = gaussian_filter1d(path[:, 1], sigma=2)
    
    return path, potential_values


# Define start, goal, and obstacles
start = [175, 350]
goal = [125, -50]
# obstacles = [(149, 208), (148, 209), (147, 210), (146, 211), (146, 212), (145, 213)]
obstacles =[(149, 208), (148, 209), (147, 210), (146, 211), (146, 212), (145, 213), (144, 214), (144, 215),
              (143, 216), (142, 217), (142, 218), (141, 219), (140, 220), (139, 221), (138, 222), (138, 223),
                (137, 224), (136, 225), (136, 226), (135, 227), (134, 228), (133, 229), (133, 230), (132, 231),
                  (131, 232), (130, 233), (129, 234), (129, 235), (128, 236), (127, 237), (127, 238), (126, 239),
                    (126, 240), (125, 241), (124, 242), (124, 243), (123, 244), (122, 245), (122, 246), (121, 247), 
                    (120, 248), (120, 249), (119, 250), (119, 251), (118, 252), (117, 253), (117, 254), (116, 255), 
                    (115, 256), (115, 257), (114, 258), (113, 259), (113, 260), (112, 261), (111, 262), (111, 263),
                      (110, 264), (110, 265), (109, 266), (108, 267), (108, 268), (107, 269), (107, 270), (106, 271),
                        (107, 272), (107, 273), (108, 274), (109, 275), (110, 276), (111, 277), (112, 277), (113, 278),
                          (114, 279), (115, 279), (116, 279), (117, 279), (118, 279), (119, 278), (120, 277), (120, 276),
                            (121, 275), (122, 274), (122, 273), (123, 272), (124, 271), (125, 270), (125, 269), (126, 268),
                              (126, 267), (127, 266), (128, 265), (128, 264), (129, 263), (130, 262), 
(131, 261), (131, 260), (132, 259), (133, 258), (133, 257), (134, 256), (135, 255), (135, 254), (136, 253), 
(137, 252), (138, 251), (139, 250), (139, 249), (140, 248), (141, 247), (142, 246), (142, 245), (143, 244), 
(144, 243), (145, 242), (146, 241), (146, 240), (147, 239), (148, 238), (149, 237), (149, 236), (150, 235), 
(151, 234), (152, 233), (153, 232), (154, 232), (155, 233), (156, 233), (157, 234), (158, 235), (159, 236), 
(160, 236), (161, 237), (162, 238), (163, 239), (164, 240), (165, 240), (166, 241), (167, 242), (168, 243), 
(169, 244), (170, 245), (171, 246), (172, 247), (173, 247), (174, 248), (175, 249), (176, 250), (177, 251), 
(178, 251), (179, 252), (180, 253), (181, 254), (182, 255), (183, 255), (184, 256), (185, 257), (186, 258),
 (187, 258), (188, 259), (189, 260), (190, 261), (191, 262), (192, 262), (193, 263), (194, 264), (195, 265),
   (196, 265), (197, 266), (198, 267), (199, 268), (200, 269), (201, 268), (202, 268), (203, 268), (204, 268),
     (205, 267), (205, 266), (206, 265), (207, 264), (208, 263), (208, 262), (209, 261), (210, 260), (211, 259),
       (211, 258), (211, 257), (211, 256), (211, 255), (210, 254), (209, 253), (208, 252), (207, 251), (206, 250),
         (205, 250), (204, 249), (203, 248), (202, 247), (201, 247), (200, 246), (199, 245), (198, 245), (197, 244),
           (196, 243), (195, 242), (194, 241), (193, 241), (192, 240), 
(191, 239), (190, 238), (189, 238), (188, 237), (187, 236), (186, 235), (185, 234), (184, 234), (183, 233), 
(182, 232), (181, 231), (180, 230), (179, 230), (178, 229), (177, 228), (176, 227), (175, 226), (174, 226), 
(173, 225), (172, 224), (171, 223), (170, 222), (169, 221), (168, 220), (167, 220), (166, 219), (165, 218), 
(164, 217), (163, 216), (162, 215), (161, 214), (160, 213), (159, 213), (158, 212), (157, 211), (156, 210), (155, 210),
 (154, 209), (153, 208), (376, 36), (375, 37), (374, 37), (373, 37), (372, 37), (371, 37), (370, 37), (369, 38), (368, 38), (367, 38),
             (366, 38), (365, 38), (364, 39), (363, 39), (362, 39), (361, 39), (360, 40), (359, 40), (358, 40), (357, 40),
               (356, 40), (355, 41), (354, 41), (353, 41), (352, 41), (351, 41), (350, 41), (349, 42), (348, 42), (347, 42),
                 (346, 42), (345, 42), (344, 43), (343, 43), (342, 43), (341, 43), (340, 43), (339, 43), (338, 44), (337, 44),
                   (336, 44), (335, 44), (334, 44), (333, 44), (332, 44), (331, 44), (330, 44), (329, 44), (328, 44), (327, 44),
                     (326, 44), (325, 44), (324, 44), (323, 44), (322, 44), (321, 44), (320, 44), (319, 44), (318, 44), (317, 44),
                       (316, 45), (315, 45), (314, 45), (313, 45), (312, 45), (311, 45), (310, 45), (309, 45), (308, 45), (307, 45),
                         (306, 45), (305, 45), (304, 45), (303, 45), (302, 45), (301, 45), (300, 45), (299, 46), (298, 46), (297, 46),
                           (297, 47), (296, 48), (296, 49), (296, 50), (296, 51), (296, 52), (296, 53), (296, 54), (296, 55), (296, 56),
                             (296, 57), (296, 58), (296, 59), (296, 60), (296, 61), (296, 62), (296, 63), (296, 64), (296, 65), (296, 66),
                               (296, 67), (297, 68), (297, 69), (297, 70), (297, 71), (297, 72), (297, 73), (297, 74), (297, 75), (297, 76),
                                 (297, 77), (297, 78), (297, 79), (297, 80), (297, 81), (297, 82), (297, 83), (297, 84), (297, 85), (297, 86),
                                   (297, 87), (297, 88), (297, 89), (297, 90), (297, 91), (297, 92), (297, 93), (297, 94), (297, 95), (297, 96),
                                     (297, 97), (297, 98), (297, 99), (297, 100), (297, 101), (297, 102), (297, 103), (297, 104), (297, 105), 
                                     (297, 106), (297, 107), (296, 108), (296, 109), (296, 110), (296, 111), (296, 112), (296, 113), (296, 114),
                                       (296, 115), (296, 116), (296, 117), (297, 118), (297, 119), (297, 120), (297, 121), (297, 122), (297, 123),
                                         (297, 124), (297, 125), (297, 126), (297, 127), (297, 128), (297, 129), (297, 130), (297, 131), (297, 132),
                                           (297, 133), (297, 134), (297, 135), (297, 136), (297, 137), (297, 138), (297, 139), (297, 140), (297, 141),
                                             (297, 142), (297, 143), (297, 144), (297, 145), (297, 146), (297, 147), (297, 148), (297, 149), (297, 150),
                                               (297, 151), (297, 152), (297, 153), (297, 154), (297, 155), (297, 156), (297, 157), (297, 158), (297, 159),
                                                 (297, 160), (297, 161), (297, 162), (298, 163), (298, 164), (298, 165), (299, 165), (300, 165), (301, 166),
                                                   (302, 166), (303, 166), (304, 166), (305, 166), (306, 165), (307, 165), (308, 165), (309, 165), (310, 165),
                                                     (311, 165), (312, 165), (313, 165), (314, 165), (315, 165), (316, 165), (317, 165), (318, 165), (319, 165),
                                                       (320, 165), (321, 165), (322, 165), (323, 165), (324, 165), (325, 165), (326, 165), (327, 165), (328, 165),
                                                         (329, 165), (330, 165), (331, 164), (332, 164), (333, 164), (334, 164), (335, 164), (336, 164), (337, 164),
                                                           (338, 164), (339, 164), (340, 164), (341, 164), (342, 164), (343, 164), (344, 164), (345, 164), (346, 164),
                                                             (347, 164), (348, 164), (349, 164), (350, 164), (351, 164), (352, 164), (353, 164), (354, 164), (355, 164),
                                                               (356, 164), (357, 163), (358, 163), (359, 163), (360, 163), (361, 163), (362, 163), (363, 163), (364, 163),
                                                                 (365, 163), (366, 163), (367, 163), (368, 163), (369, 163), (370, 163), (371, 163), (372, 163), (373, 163),
                                                                   (374, 163), (375, 163), (376, 163), (377, 163), (378, 163), (379, 163), (380, 162), (381, 162), (382, 161),
                                                                     (382, 160), (382, 159), (382, 158), (382, 157), (382, 156), (382, 155), (382, 154), (382, 153), (382, 152),
                                                                       (382, 151), (382, 150), (382, 149), (382, 148), (382, 147), (382, 146), (382, 145), (382, 144), (382, 143),
                                                                         (382, 142), (382, 141), (382, 140), (382, 139), (382, 138), (382, 137), (382, 136), (382, 135), (382, 134), (382, 133), (382, 132), (382, 131), (382, 130), (382, 129), (382, 128), (382, 127), (382, 126), (382, 125), (382, 124), (382, 123), (382, 122), (382, 121), (382, 120), (382, 119), (382, 118), (382, 117), (382, 116), (382, 115), (383, 114), (382, 113), (382, 112), (382, 111), (382, 110), (382, 109), (382, 108), (382, 107), (382, 106), (382, 105), (382, 104), (382, 103), (382, 102), (382, 101), (382, 100), (382, 99), (382, 98), (382, 97), (382, 96), (382, 95), (382, 94), (382, 93), (382, 92), (382, 91), (382, 90), (382, 89), (382, 88), (382, 87), (382, 86), (382, 85), (382, 84), (382, 83), (382, 82), (382, 81), (382, 80), (382, 79), (382, 78), (382, 77), (382, 76), (382, 75), (382, 74), (381, 73), (381, 72), (381, 71), (381, 70), (381, 69), (381, 68), (381, 67), (381, 66), (381, 65), (381, 64), (381, 63), (381, 62), (381, 61), (381, 60), (381, 59), (381, 58), (381, 57), (381, 56), (381, 55), (381, 54), (381, 53), (381, 52), (381, 51), (380, 50), (380, 49), (380, 48), (380, 47), (380, 46), (380, 45), (380, 44), (380, 43), (380, 42), (380, 41), (380, 40), (380, 39), (379, 38), (379, 37), (379, 36), 

(137, 30), (136, 31), (135, 31), (134, 31), (133, 32), (132, 32), (131, 32), (130, 33), (129, 33), (128, 34), (127, 34), (126, 35), (125, 35), (124, 36),
 (123, 37), (122, 38), (121, 39), (120, 40), (119, 41), (118, 42), (117, 43), (117, 44), (116, 45), (115, 46), (115, 47), (114, 48), (114, 49), (113, 50),
   (113, 51), (112, 52), (112, 53), (111, 54), (110, 55), (110, 56), (109, 57), (108, 58), (107, 59), (107, 60), (107, 61), (107, 62), (106, 63), (106, 64),
     (106, 65), (107, 66), (107, 67), (107, 68), (107, 69), (108, 70), (108, 71), (109, 72), (109, 73), (110, 74), (111, 75), (112, 76), (112, 77), (113, 78),
       (114, 79), (115, 80), (116, 81), (117, 82), (118, 82), (119, 83), (120, 84), (121, 85), (122, 86), (123, 87), (124, 87), (125, 88), (126, 88), (127, 89),
         (128, 89), (129, 89), (130, 90), (131, 90), (132, 90), (133, 91), (134, 91), (135, 91), (136, 91), (137, 91), (138, 91), (139, 91), (140, 90), (141, 90),
           (142, 90), (143, 90), (144, 90), (145, 89), (146, 89), (147, 89), (148, 88), (149, 88), (150, 88), (151, 87), (152, 87), (153, 87), (154, 86), (155, 85),
             (156, 84), (157, 83), (158, 82), (159, 81), (160, 80), (160, 79), (161, 78), (162, 77), (162, 76), (163, 75), (163, 74), (163, 73), (164, 72), (164, 71),
               (164, 70), (164, 69), (165, 68), (165, 67), (165, 66), (165, 65), (166, 64), (166, 63), (166, 62), (166, 61), (166, 60), (166, 59), (166, 58), (166, 57),
                 (166, 56), (166, 55), (166, 54), (166, 53), (165, 52), (165, 51), (165, 50), (165, 49), (164, 48), (163, 47), (163, 46), (162, 45), (161, 44), (161, 43),
                   (160, 42), (159, 41), (158, 40), (157, 39), (156, 38), (155, 37), (154, 36), (153, 35), (152, 34), (151, 33), (150, 33), (149, 32), (148, 32), (147, 31),
                     (146, 31), (145, 31), (144, 31), (143, 30)]

# Compute the path and potential values
path, potential_values = apf_path_planning(start, goal, obstacles)

# Plot the results
plt.figure(figsize=(6,11))
plt.plot(path[:, 0], path[:, 1], "b.-", label="Smoothed Path")
plt.scatter(*zip(*obstacles), color="red", label="Obstacles")
plt.scatter(*goal, color="green", marker="x", s=100, label="Goal")
plt.scatter(*start, color="black", marker="o", label="Start")
plt.legend()
plt.grid()
plt.title("Artificial Potential Field Path Planning with Smoothing")
# plt.show()

# Plot the potential field evolution
plt.figure()
plt.plot(potential_values, "r-", label="Potential Field Value")
plt.xlabel("Step")
plt.ylabel("Potential")
plt.title("Potential Field over Steps")
plt.legend()
plt.grid()
plt.show()
